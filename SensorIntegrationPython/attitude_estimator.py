# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _attitude_estimator
else:
    import _attitude_estimator

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class AttitudeEstimator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ME_DEFAULT = _attitude_estimator.AttitudeEstimator_ME_DEFAULT
    ME_FUSED_YAW = _attitude_estimator.AttitudeEstimator_ME_FUSED_YAW
    ME_ABS_FUSED_YAW = _attitude_estimator.AttitudeEstimator_ME_ABS_FUSED_YAW
    ME_ZYX_YAW = _attitude_estimator.AttitudeEstimator_ME_ZYX_YAW
    ME_COUNT = _attitude_estimator.AttitudeEstimator_ME_COUNT

    def __init__(self, quickLearn=True):
        _attitude_estimator.AttitudeEstimator_swiginit(self, _attitude_estimator.new_AttitudeEstimator(quickLearn))

    def reset(self, quickLearn=True, resetGyroBias=True):
        return _attitude_estimator.AttitudeEstimator_reset(self, quickLearn, resetGyroBias)

    def resetAll(self, quickLearn=True):
        return _attitude_estimator.AttitudeEstimator_resetAll(self, quickLearn)

    def getAccMethod(self):
        return _attitude_estimator.AttitudeEstimator_getAccMethod(self)

    def setAccMethod(self, method):
        return _attitude_estimator.AttitudeEstimator_setAccMethod(self, method)

    def getAttitude(self, q):
        return _attitude_estimator.AttitudeEstimator_getAttitude(self, q)

    def setAttitude(self, *args):
        return _attitude_estimator.AttitudeEstimator_setAttitude(self, *args)

    def setAttitudeEuler(self, yaw, pitch, roll):
        return _attitude_estimator.AttitudeEstimator_setAttitudeEuler(self, yaw, pitch, roll)

    def setAttitudeFused(self, yaw, pitch, roll, hemi):
        return _attitude_estimator.AttitudeEstimator_setAttitudeFused(self, yaw, pitch, roll, hemi)

    def eulerYaw(self):
        return _attitude_estimator.AttitudeEstimator_eulerYaw(self)

    def eulerPitch(self):
        return _attitude_estimator.AttitudeEstimator_eulerPitch(self)

    def eulerRoll(self):
        return _attitude_estimator.AttitudeEstimator_eulerRoll(self)

    def fusedYaw(self):
        return _attitude_estimator.AttitudeEstimator_fusedYaw(self)

    def fusedPitch(self):
        return _attitude_estimator.AttitudeEstimator_fusedPitch(self)

    def fusedRoll(self):
        return _attitude_estimator.AttitudeEstimator_fusedRoll(self)

    def fusedHemi(self):
        return _attitude_estimator.AttitudeEstimator_fusedHemi(self)

    def getGyroBias(self, b):
        return _attitude_estimator.AttitudeEstimator_getGyroBias(self, b)

    def setGyroBias(self, *args):
        return _attitude_estimator.AttitudeEstimator_setGyroBias(self, *args)

    def getMagCalib(self, mt):
        return _attitude_estimator.AttitudeEstimator_getMagCalib(self, mt)

    def setMagCalib(self, *args):
        return _attitude_estimator.AttitudeEstimator_setMagCalib(self, *args)

    def getLambda(self):
        return _attitude_estimator.AttitudeEstimator_getLambda(self)

    def resetLambda(self):
        return _attitude_estimator.AttitudeEstimator_resetLambda(self)

    def setLambda(self, value=1.0):
        return _attitude_estimator.AttitudeEstimator_setLambda(self, value)

    def getPIGains(self, Kp, Ti, KpQuick, TiQuick):
        return _attitude_estimator.AttitudeEstimator_getPIGains(self, Kp, Ti, KpQuick, TiQuick)

    def setPIGains(self, Kp, Ti, KpQuick, TiQuick):
        return _attitude_estimator.AttitudeEstimator_setPIGains(self, Kp, Ti, KpQuick, TiQuick)

    def getQLTime(self):
        return _attitude_estimator.AttitudeEstimator_getQLTime(self)

    def setQLTime(self, QLTime):
        return _attitude_estimator.AttitudeEstimator_setQLTime(self, QLTime)

    def update(self, dt, gyroX, gyroY, gyroZ, accX, accY, accZ, magX, magY, magZ):
        return _attitude_estimator.AttitudeEstimator_update(self, dt, gyroX, gyroY, gyroZ, accX, accY, accZ, magX, magY, magZ)
    __swig_destroy__ = _attitude_estimator.delete_AttitudeEstimator

# Register AttitudeEstimator in _attitude_estimator:
_attitude_estimator.AttitudeEstimator_swigregister(AttitudeEstimator)
cvar = _attitude_estimator.cvar
AttitudeEstimator.ACC_TOL_SQ = _attitude_estimator.cvar.AttitudeEstimator_ACC_TOL_SQ
AttitudeEstimator.QY_NORM_TOL_SQ = _attitude_estimator.cvar.AttitudeEstimator_QY_NORM_TOL_SQ
AttitudeEstimator.QHAT_NORM_TOL_SQ = _attitude_estimator.cvar.AttitudeEstimator_QHAT_NORM_TOL_SQ
AttitudeEstimator.XGYG_NORM_TOL_SQ = _attitude_estimator.cvar.AttitudeEstimator_XGYG_NORM_TOL_SQ
AttitudeEstimator.WEZE_NORM_TOL_SQ = _attitude_estimator.cvar.AttitudeEstimator_WEZE_NORM_TOL_SQ
AttitudeEstimator.ZGHAT_ABS_TOL = _attitude_estimator.cvar.AttitudeEstimator_ZGHAT_ABS_TOL



