# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _imu3dmgx510
else:
    import _imu3dmgx510

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import SerialComm
import attitude_estimator
class hex_decode_error(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _imu3dmgx510.hex_decode_error_swiginit(self, _imu3dmgx510.new_hex_decode_error())
    __swig_destroy__ = _imu3dmgx510.delete_hex_decode_error

# Register hex_decode_error in _imu3dmgx510:
_imu3dmgx510.hex_decode_error_swigregister(hex_decode_error)

class not_enough_input(hex_decode_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _imu3dmgx510.not_enough_input_swiginit(self, _imu3dmgx510.new_not_enough_input())
    __swig_destroy__ = _imu3dmgx510.delete_not_enough_input

# Register not_enough_input in _imu3dmgx510:
_imu3dmgx510.not_enough_input_swigregister(not_enough_input)

class non_hex_input(hex_decode_error):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _imu3dmgx510.non_hex_input_swiginit(self, _imu3dmgx510.new_non_hex_input())
    __swig_destroy__ = _imu3dmgx510.delete_non_hex_input

# Register non_hex_input in _imu3dmgx510:
_imu3dmgx510.non_hex_input_swigregister(non_hex_input)

CAL_LOOPS = _imu3dmgx510.CAL_LOOPS
T_OUT = _imu3dmgx510.T_OUT
T_WAIT = _imu3dmgx510.T_WAIT
class IMU3DMGX510(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _imu3dmgx510.IMU3DMGX510_swiginit(self, _imu3dmgx510.new_IMU3DMGX510(*args))

    def check(self):
        return _imu3dmgx510.IMU3DMGX510_check(self)

    def set_freq(self, arg2):
        return _imu3dmgx510.IMU3DMGX510_set_freq(self, arg2)

    def calibrate(self):
        return _imu3dmgx510.IMU3DMGX510_calibrate(self)

    def Ping(self):
        return _imu3dmgx510.IMU3DMGX510_Ping(self)

    def set_IDLEmode(self):
        return _imu3dmgx510.IMU3DMGX510_set_IDLEmode(self)

    def set_streamon(self):
        return _imu3dmgx510.IMU3DMGX510_set_streamon(self)

    def set_streamoff(self):
        return _imu3dmgx510.IMU3DMGX510_set_streamoff(self)

    def set_reset(self):
        return _imu3dmgx510.IMU3DMGX510_set_reset(self)

    def set_devicetogetgyroacc(self):
        return _imu3dmgx510.IMU3DMGX510_set_devicetogetgyroacc(self)

    def set_devicetogetgyro(self):
        return _imu3dmgx510.IMU3DMGX510_set_devicetogetgyro(self)

    def get_gyroPolling(self):
        return _imu3dmgx510.IMU3DMGX510_get_gyroPolling(self)

    def get_euleranglesPolling(self):
        return _imu3dmgx510.IMU3DMGX510_get_euleranglesPolling(self)

    def GetPitchRoll(self, pitch, roll):
        return _imu3dmgx510.IMU3DMGX510_GetPitchRoll(self, pitch, roll)

    def GetPitchRollYaw(self, pitch, roll, yaw, angles):
        return _imu3dmgx510.IMU3DMGX510_GetPitchRollYaw(self, pitch, roll, yaw, angles)

    def GetPitch(self, pitch, roll, yaw):
        return _imu3dmgx510.IMU3DMGX510_GetPitch(self, pitch, roll, yaw)

    def GetRoll(self, pitch, roll, yaw):
        return _imu3dmgx510.IMU3DMGX510_GetRoll(self, pitch, roll, yaw)

    def GetYaw(self, pitch, roll, yaw):
        return _imu3dmgx510.IMU3DMGX510_GetYaw(self, pitch, roll, yaw)

    def Reset(self):
        return _imu3dmgx510.IMU3DMGX510_Reset(self)

    def get_gyroStreaming(self, arg2):
        return _imu3dmgx510.IMU3DMGX510_get_gyroStreaming(self, arg2)

    def get_euleranglesStreaming(self, arg2):
        return _imu3dmgx510.IMU3DMGX510_get_euleranglesStreaming(self, arg2)

    def EulerAngles(self):
        return _imu3dmgx510.IMU3DMGX510_EulerAngles(self)

    def GyroData(self):
        return _imu3dmgx510.IMU3DMGX510_GyroData(self)
    __swig_destroy__ = _imu3dmgx510.delete_IMU3DMGX510

# Register IMU3DMGX510 in _imu3dmgx510:
_imu3dmgx510.IMU3DMGX510_swigregister(IMU3DMGX510)



